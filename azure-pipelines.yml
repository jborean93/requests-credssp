trigger:
  branches:
    include:
    - master
  tags:
    include:
    - v*
  paths:
    exclude:
    - CHANGELOG.md
    - LICENSE
    - README.md

schedules:
- cron: 0 14 * * 0
  displayName: Weekly CI build
  branches:
    include:
    - master
  always: true

stages:
- stage: Test
  jobs:

  - job: Test_Linux
    pool:
      vmImage: ubuntu-18.04
    strategy:
      matrix:
        Python27:
          python.version: 2.7
        Python35:
          python.version: 3.5
        Python36:
          python.version: 3.6
        Python37:
          python.version: 3.7
        Python38:
          python.version: 3.8

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(python.version)

    - script: |
        echo "Installing baseline pip packages"
        python -m pip install --upgrade pip setuptools wheel coverage -c tests/constraints.txt

        echo "Installing test requirements"
        python -m pip install -r requirements-test.txt -c tests/constraints.txt

        echo "Installing package"
        python -m pip install . -c tests/constraints.txt
      displayName: Install

    - script: |
        python -m pycodestyle requests_credssp --verbose --show-source --statistics
      displayName: Lint

    - script: |
        pytest -v --junitxml junit/test-results.xml --cov requests_credssp --cov-report xml --cov-report term-missing
      displayName: Test

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: $(Agent.OS) - $(Build.BuildNumber) - Python $(python.version)
      displayName: Publish test results
      condition: succeededOrFailed()

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml

    - script: |
        bash <(curl -s https://codecov.io/bash)
      displayName: Upload to codecov.io
      continueOnError: true
      timeoutInMinutes: 5

  - job: Test_Windows
    variables:
      credssp_username: CredSSPTest
      credssp_password: Password01!
    pool:
      vmImage: windows-2019
    strategy:
      matrix:
        Python27-x86:
          python.version: 2.7
          python.arch: x86
        Python27-x64:
          python.version: 2.7
          python.arch: x64
        Python35-x86:
          python.version: 3.5
          python.arch: x86
        Python35-x64:
          python.version: 3.5
          python.arch: x64
        Python36-x86:
          python.version: 3.6
          python.arch: x86
        Python36-x64:
          python.version: 3.6
          python.arch: x64
        Python37-x86:
          python.version: 3.7
          python.arch: x86
        Python37-x64:
          python.version: 3.7
          python.arch: x64
        Python38-x86:
          python.version: 3.8
          python.arch: x86
        Python38-x64:
          python.version: 3.8
          python.arch: x64

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(python.version)
        architecture: $(python.arch)

    - powershell: |
        Write-Host 'Enabling WinRM and CredSSP'
        Enable-PSRemoting -Force
        $null = Enable-WSManCredSSP -Role Server -Force
        Set-Item -Path WSMan:\localhost\Service\Auth\CredSSP -Value $true

        Write-Host 'Recreating WSMan listeners'
        Remove-Item -Path WSMan:\localhost\Listener\* -Recurse -Force
        $null = New-WSManInstance -ResourceURI winrm/config/Listener -SelectorSet @{
            Address = '*'
            Transport = 'HTTP'
        }

        $cert = New-SelfSignedCertificate -DnsName $env:COMPUTERNAME -CertStoreLocation cert:\LocalMachine\My
        $wsmanParams = @{
            ResourceURI = 'winrm/config/Listener'
            SelectorSet = @{
                Address = '*'
                Transport = 'HTTPS'
            }
            ValueSet = @{
                CertificateThumbprint = $cert.Thumbprint
            }
        }
        $null = New-WSManInstance @wsmanParams

        Write-Host 'Opening up firewall'
        $firewallParams = @{
            Profile = @('Domain', 'Private', 'Public')
            Direction = 'Inbound'
            Action = 'Allow'
            Protocol = 'TCP'
        }
        $null = New-NetFirewallRule -DisplayName "WinRM HTTP" -LocalPort 5985 @firewallParams
        $null = New-NetFirewallRule -DisplayName "WinRM HTTPS" -LocalPort 5986 @firewallParams

        Write-Host 'Create local admin user'
        $userParams = @{
            Name = '$(credssp_username)'
            Password = (ConvertTo-SecureString -AsPlainText -Force -String '$(credssp_password)')
            AccountNeverExpires = $true
            PasswordNeverExpires = $true
        }
        $null = New-LocalUser @userParams
        Add-LocalGroupMember -Group Administrators -Member $userParams.Name
      displayName: Set up WinRM and test account

    - script: |
        echo "Installing baseline pip packages"
        python -m pip install --upgrade pip setuptools wheel coverage -c tests/constraints.txt

        echo "Installing test requirements"
        python -m pip install -r requirements-test.txt -c tests/constraints.txt

        echo "Installing package"
        python -m pip install . -c tests/constraints.txt
      displayName: Install

    - script: |
        python -m pycodestyle requests_credssp --verbose --show-source --statistics
      displayName: Lint

    - script: |
        pytest -v --junitxml junit/test-results.xml --cov requests_credssp --cov-report xml --cov-report term-missing
      env:
        CREDSSP_SERVER: localhost
        CREDSSP_USERNAME: $(credssp_username)
        CREDSSP_PASSWORD: $(credssp_password)
      displayName: Test

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: $(Agent.OS) - $(Build.BuildNumber) - Python $(python.version) $(python.arch)
      displayName: Publish test results
      condition: succeededOrFailed()

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml

    - script: |
        choco.exe install codecov --yes --no-progress
        codecov.exe -f coverage.xml
      displayName: Upload to codecov.io
      continueOnError: true
      timeoutInMinutes: 5

- stage: Publish
  jobs:

  - job: Publish
    pool:
      vmImage: ubuntu-18.04

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: 3.8

    - script: |
        python -m pip install twine wheel -c tests/constraints.txt
      displayName: Install build requirements

    - script: |
        python setup.py bdist_wheel --universal
        python setup.py sdist
      displayName: Build universal wheel and sdist

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: dist
        artifactName: wheels

    - task: TwineAuthenticate@1
      displayName: Twine Authenticate
      condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/v'))
      inputs:
        pythonUploadServiceConnection: pypi

    - script: |
        python -m twine upload -r pypi --config-file $(PYPIRC_PATH) dist/*
      condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/v'))
      displayName: Publish artifact to Pypi
